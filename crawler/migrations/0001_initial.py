# Generated by Django 5.2.3 on 2025-06-27 14:39

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CrawlJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "strategy",
                    models.CharField(
                        choices=[
                            ("single", "Single URL"),
                            ("multi", "Multiple URLs"),
                            ("deep_bfs", "Deep Crawl - Breadth First"),
                            ("deep_dfs", "Deep Crawl - Depth First"),
                            ("deep_best", "Deep Crawl - Best First"),
                        ],
                        default="single",
                        max_length=20,
                    ),
                ),
                ("start_urls", models.JSONField(help_text="List of starting URLs")),
                (
                    "max_pages",
                    models.PositiveIntegerField(
                        default=10, help_text="Maximum pages to crawl"
                    ),
                ),
                (
                    "max_depth",
                    models.PositiveIntegerField(
                        default=3, help_text="Maximum crawl depth for deep crawling"
                    ),
                ),
                (
                    "include_patterns",
                    models.JSONField(
                        blank=True, help_text="Regex patterns to include", null=True
                    ),
                ),
                (
                    "exclude_patterns",
                    models.JSONField(
                        blank=True, help_text="Regex patterns to exclude", null=True
                    ),
                ),
                (
                    "delay_between_requests",
                    models.FloatField(
                        default=0.5, help_text="Delay between requests in seconds"
                    ),
                ),
                ("respect_robots_txt", models.BooleanField(default=True)),
                ("use_cache", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "progress",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of pages processed"
                    ),
                ),
                (
                    "total_found",
                    models.PositiveIntegerField(
                        default=0, help_text="Total URLs discovered"
                    ),
                ),
                ("error_message", models.TextField(blank=True, null=True)),
                ("successful_crawls", models.PositiveIntegerField(default=0)),
                ("failed_crawls", models.PositiveIntegerField(default=0)),
                (
                    "total_content_size",
                    models.PositiveIntegerField(
                        default=0, help_text="Total size of extracted content in bytes"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CrawledPage",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("url", models.URLField(max_length=2000)),
                (
                    "final_url",
                    models.URLField(
                        help_text="Final URL after redirects", max_length=2000
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=500, null=True)),
                ("crawled_at", models.DateTimeField(auto_now_add=True)),
                (
                    "depth",
                    models.PositiveIntegerField(
                        default=0, help_text="Depth from starting URL"
                    ),
                ),
                ("status_code", models.PositiveIntegerField(blank=True, null=True)),
                ("success", models.BooleanField(default=False)),
                ("error_message", models.TextField(blank=True, null=True)),
                (
                    "raw_markdown",
                    models.TextField(
                        blank=True, help_text="Raw markdown content", null=True
                    ),
                ),
                (
                    "clean_markdown",
                    models.TextField(
                        blank=True,
                        help_text="Cleaned markdown for vector DB",
                        null=True,
                    ),
                ),
                ("word_count", models.PositiveIntegerField(default=0)),
                (
                    "content_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA256 hash of clean content",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("meta_description", models.TextField(blank=True, null=True)),
                ("meta_keywords", models.TextField(blank=True, null=True)),
                ("author", models.CharField(blank=True, max_length=200, null=True)),
                ("publish_date", models.DateTimeField(blank=True, null=True)),
                ("language", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "internal_links",
                    models.JSONField(
                        default=list, help_text="List of internal links found"
                    ),
                ),
                (
                    "external_links",
                    models.JSONField(
                        default=list, help_text="List of external links found"
                    ),
                ),
                (
                    "content_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("content_length", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "response_time",
                    models.FloatField(
                        blank=True, help_text="Response time in seconds", null=True
                    ),
                ),
                ("is_processed_for_embeddings", models.BooleanField(default=False)),
                (
                    "embedding_chunks",
                    models.JSONField(
                        default=list, help_text="Text chunks for embedding"
                    ),
                ),
                (
                    "crawl_job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="crawler.crawljob",
                    ),
                ),
            ],
            options={
                "ordering": ["-crawled_at"],
            },
        ),
        migrations.CreateModel(
            name="CrawlStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_words", models.PositiveIntegerField(default=0)),
                ("total_characters", models.PositiveIntegerField(default=0)),
                ("average_words_per_page", models.FloatField(default=0.0)),
                ("total_internal_links", models.PositiveIntegerField(default=0)),
                ("total_external_links", models.PositiveIntegerField(default=0)),
                ("unique_domains_found", models.PositiveIntegerField(default=0)),
                (
                    "total_crawl_time",
                    models.FloatField(
                        default=0.0, help_text="Total crawl time in seconds"
                    ),
                ),
                (
                    "average_response_time",
                    models.FloatField(
                        default=0.0, help_text="Average response time in seconds"
                    ),
                ),
                ("pages_per_minute", models.FloatField(default=0.0)),
                (
                    "success_rate",
                    models.FloatField(
                        default=0.0, help_text="Percentage of successful crawls"
                    ),
                ),
                (
                    "content_quality_score",
                    models.FloatField(
                        default=0.0, help_text="Quality score based on content analysis"
                    ),
                ),
                (
                    "common_errors",
                    models.JSONField(
                        default=dict, help_text="Common error types and counts"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "crawl_job",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="statistics",
                        to="crawler.crawljob",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="crawljob",
            index=models.Index(
                fields=["status", "created_at"], name="crawler_cra_status_249ffe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crawljob",
            index=models.Index(
                fields=["created_by", "status"], name="crawler_cra_created_783af2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crawledpage",
            index=models.Index(
                fields=["crawl_job", "success"], name="crawler_cra_crawl_j_1d426b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crawledpage",
            index=models.Index(fields=["url"], name="crawler_cra_url_9b7c41_idx"),
        ),
        migrations.AddIndex(
            model_name="crawledpage",
            index=models.Index(
                fields=["content_hash"], name="crawler_cra_content_2efd5d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="crawledpage",
            index=models.Index(
                fields=["is_processed_for_embeddings"],
                name="crawler_cra_is_proc_ba5f52_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="crawledpage",
            index=models.Index(
                fields=["crawled_at"], name="crawler_cra_crawled_72ada0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="crawledpage",
            unique_together={("crawl_job", "url")},
        ),
    ]
