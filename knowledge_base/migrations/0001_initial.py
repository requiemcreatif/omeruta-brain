# Generated by Django 5.2.3 on 2025-06-28 16:48

import django.db.models.deletion
import pgvector.django.vector
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("crawler", "0004_remove_crawljob_filter_type_and_more"),
    ]

    operations = [
        # pgvector extension already enabled manually
        # Create models
        migrations.CreateModel(
            name="QueryCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "query_hash",
                    models.CharField(
                        help_text="SHA256 hash of query", max_length=64, unique=True
                    ),
                ),
                ("original_query", models.TextField()),
                ("expanded_queries", models.JSONField(default=list)),
                ("relevant_chunks", models.JSONField(default=list)),
                ("generated_response", models.TextField(blank=True, null=True)),
                ("retrieval_time_ms", models.IntegerField(default=0)),
                ("generation_time_ms", models.IntegerField(default=0)),
                (
                    "user_rating",
                    models.IntegerField(blank=True, help_text="1-5 rating", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("access_count", models.IntegerField(default=1)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["query_hash"], name="knowledge_b_query_h_bb9b13_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="knowledge_b_created_fa7a08_idx"
                    ),
                    models.Index(
                        fields=["access_count"], name="knowledge_b_access__0411ee_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="KnowledgeEmbedding",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("chunk_text", models.TextField(help_text="The actual text chunk")),
                (
                    "chunk_index",
                    models.IntegerField(help_text="Index of chunk within the page"),
                ),
                (
                    "chunk_tokens",
                    models.IntegerField(help_text="Number of tokens in chunk"),
                ),
                ("embedding", pgvector.django.vector.VectorField(dimensions=384)),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional metadata for filtering"
                    ),
                ),
                (
                    "content_quality_score",
                    models.FloatField(default=0.0, help_text="Quality score 0-1"),
                ),
                (
                    "semantic_density",
                    models.FloatField(
                        default=0.0, help_text="Information density score"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("processing_version", models.CharField(default="1.0", max_length=10)),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embeddings",
                        to="crawler.crawledpage",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["page"], name="knowledge_b_page_id_455cc0_idx"
                    ),
                    models.Index(
                        fields=["chunk_index"], name="knowledge_b_chunk_i_406d0b_idx"
                    ),
                    models.Index(
                        fields=["content_quality_score"],
                        name="knowledge_b_content_bdc506_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="knowledge_b_created_77074f_idx"
                    ),
                ],
                "unique_together": {("page", "chunk_index")},
            },
        ),
        # Create vector similarity index for fast cosine similarity search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS idx_embedding_vector ON knowledge_base_knowledgeembedding USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);",
            reverse_sql="DROP INDEX IF EXISTS idx_embedding_vector;",
        ),
        # Additional indexes for performance
        migrations.RunSQL(
            [
                "CREATE INDEX IF NOT EXISTS idx_embedding_page_chunk ON knowledge_base_knowledgeembedding (page_id, chunk_index);",
                "CREATE INDEX IF NOT EXISTS idx_embedding_quality ON knowledge_base_knowledgeembedding (content_quality_score) WHERE content_quality_score > 0.5;",
                "CREATE INDEX IF NOT EXISTS idx_embedding_metadata ON knowledge_base_knowledgeembedding USING gin (metadata);",
            ]
        ),
    ]
